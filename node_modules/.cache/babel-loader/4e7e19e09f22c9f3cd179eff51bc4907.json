{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\node\\\\react_bookshelf\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\node\\\\react_bookshelf\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar callApi =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var response, body;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('/books');\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            body = _context.sent;\n\n            if (!(response.status !== 200)) {\n              _context.next = 8;\n              break;\n            }\n\n            throw Error(body.message);\n\n          case 8:\n            return _context.abrupt(\"return\", body);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function callApi() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var getCards = function getCards() {\n  return function (dispatch) {\n    callApi().then(function (res) {\n      return res;\n    }).then(function (data) {\n      data.filter(function (card) {\n        return card.note_type === 'Объект';\n      });\n      dispatch({\n        type: 'FETCH_CARDS_SUCCESS',\n        payload: data\n      });\n    });\n  };\n};","map":{"version":3,"sources":["F:\\node\\react_bookshelf\\src\\actions\\getcards.js"],"names":["callApi","fetch","response","json","body","status","Error","message","getCards","dispatch","then","res","data","filter","card","note_type","type","payload"],"mappings":";;;AAGA,IAAMA,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAqCC,KAAK,CAAC,QAAD,CAA1C;;AAAA;AAAoBC,YAAAA,QAApB;AAAA;AAAA,mBACGA,QAAQ,CAACC,IAAT,EADH;;AAAA;AACVC,YAAAA,IADU;;AAAA,kBACwBF,QAAQ,CAACG,MAAT,KAAoB,GAD5C;AAAA;AAAA;AAAA;;AAAA,kBACuDC,KAAK,CAACF,IAAI,CAACG,OAAN,CAD5D;;AAAA;AAAA,6CAGTH,IAHS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPJ,OAAO;AAAA;AAAA;AAAA,GAAb;;AAOA,OAAO,IAAMQ,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAM,UAAAC,QAAQ,EAAI;AAC1CT,IAAAA,OAAO,GAAGU,IAAV,CAAe,UAAAC,GAAG,EAAG;AACjB,aAAOA,GAAP;AACD,KAFH,EAEKD,IAFL,CAEU,UAAAE,IAAI,EAAG;AACbA,MAAAA,IAAI,CAACC,MAAL,CAAY,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,SAAL,KAAmB,QAAvB;AAAA,OAAhB;AACEN,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAE,qBAAR;AAA+BC,QAAAA,OAAO,EAAEL;AAAxC,OAAD,CAAR;AACL,KALD;AAMC,GAPuB;AAAA,CAAjB","sourcesContent":["\r\n\r\n\r\nconst callApi = async () => { const response = await fetch('/books');\r\nconst body = await response.json(); if (response.status !== 200) throw Error(body.message);\r\n// console.log(body);\r\nreturn body;\r\n};\r\n\r\n\r\nexport const getCards = () => dispatch => {\r\ncallApi().then(res =>{\r\n    return res\r\n  }).then(data =>{\r\n    data.filter(card => card.note_type === 'Объект')\r\n      dispatch({ type: 'FETCH_CARDS_SUCCESS', payload: data })\r\n})\r\n}\r\n"]},"metadata":{},"sourceType":"module"}