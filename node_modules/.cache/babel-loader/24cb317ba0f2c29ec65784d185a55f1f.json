{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\node\\\\react_bookshelf\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\node\\\\react_bookshelf\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar sendImage =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(file) {\n    var image, fetchConf, response, body;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            image = new FormData();\n            image.append('image', file);\n            fetchConf = {\n              method: 'POST',\n              files: image,\n              body: image,\n              cache: 'default'\n            };\n            _context.next = 5;\n            return fetch('http://localhost:2000/upload', fetchConf);\n\n          case 5:\n            response = _context.sent;\n            _context.next = 8;\n            return response.json();\n\n          case 8:\n            body = _context.sent;\n            if (response.status !== 200) console.log('Error', body);\n            return _context.abrupt(\"return\", body.images);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function sendImage(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar SendImage = function SendImage() {\n  return function (dispatch) {\n    sendImage().then(function (res) {\n      return res;\n    }).then(function (data) {\n      console.log('', data);\n      dispatch({\n        type: 'SEND_IMAGE',\n        payload: bookfile = file[0].url\n      });\n    });\n  };\n};\n\nexport default SendImage;","map":{"version":3,"sources":["F:\\node\\react_bookshelf\\src\\reducers\\sendImage.js"],"names":["sendImage","file","image","FormData","append","fetchConf","method","files","body","cache","fetch","response","json","status","console","log","images","SendImage","dispatch","then","res","data","type","payload","bookfile","url"],"mappings":";;;AAGA,IAAMA,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,KADY,GACJ,IAAIC,QAAJ,EADI;AAEdD,YAAAA,KAAK,CAACE,MAAN,CAAa,OAAb,EAAsBH,IAAtB;AACEI,YAAAA,SAHY,GAGA;AAAEC,cAAAA,MAAM,EAAE,MAAV;AACfC,cAAAA,KAAK,EAAEL,KADQ;AAEfM,cAAAA,IAAI,EAAEN,KAFS;AAGfO,cAAAA,KAAK,EAAE;AAHQ,aAHA;AAAA;AAAA,mBAOQC,KAAK,CAAC,8BAAD,EAAiCL,SAAjC,CAPb;;AAAA;AAOTM,YAAAA,QAPS;AAAA;AAAA,mBAQCA,QAAQ,CAACC,IAAT,EARD;;AAAA;AAQZJ,YAAAA,IARY;AASlB,gBAAIG,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6BC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAsBP,IAAtB;AATX,6CAUVA,IAAI,CAACQ,MAVK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAThB,SAAS;AAAA;AAAA;AAAA,GAAf;;AAaC,IAAMiB,SAAS,GAAG,SAAZA,SAAY;AAAA,SAAM,UAAAC,QAAQ,EAAI;AACrClB,IAAAA,SAAS,GAAGmB,IAAZ,CAAiB,UAAAC,GAAG,EAAG;AACnB,aAAOA,GAAP;AACD,KAFH,EAEKD,IAFL,CAEU,UAAAE,IAAI,EAAG;AACbP,MAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ,EAAgBM,IAAhB;AACAH,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAE,YAAR;AAAsBC,QAAAA,OAAO,EAAIC,QAAQ,GAAGvB,IAAI,CAAC,CAAD,CAAJ,CAAQwB;AAApD,OAAD,CAAR;AACH,KALD;AAMC,GAPkB;AAAA,CAAlB;;AASD,eAAeR,SAAf","sourcesContent":["\r\n\r\n\r\nconst sendImage = async (file) => {\r\n  let image = new FormData();\r\n    image.append('image', file)\r\n  var fetchConf = { method: 'POST',\r\n   files: image,\r\n   body: image,\r\n   cache: 'default' };\r\n   const response = await fetch('http://localhost:2000/upload', fetchConf);\r\nconst body = await response.json();\r\nif (response.status !== 200) console.log('Error' , body);\r\n return body.images; };\r\n\r\n\r\n const SendImage = () => dispatch => {\r\nsendImage().then(res =>{\r\n    return res\r\n  }).then(data =>{\r\n    console.log('', data);\r\n    dispatch({ type: 'SEND_IMAGE', payload:   bookfile = file[0].url })\r\n})\r\n}\r\n\r\nexport default SendImage\r\n"]},"metadata":{},"sourceType":"module"}