{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\node\\\\react_bookshelf\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\node\\\\react_bookshelf\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar initialState = [{\n  title: \"\",\n  __v: 0,\n  _id: \"\"\n}]; // const callApiPost = async (data) => {\n// const response = await fetch('/books', {\n//             method: 'POST',\n//             headers: {\n//             'Accept': 'application/json',\n//             'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify(data)\n//           })\n// const body = await response.json();\n// if (response.status !== 200) throw Error(body.message);\n//    return body;\n// }\n// const callApiDelete = async (data) => {\n// const response = await fetch('/books/' + data + '', {\n//             method: 'DELETE',\n//             headers: {\n//             'Accept': 'application/json',\n//             'Content-Type': 'application/json',\n//             }\n//           })\n// const body = await response.json();\n// if (response.status !== 200) throw Error(body.message);\n//    return body;\n// }\n//\n//\n//\n\nvar sendImage =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(file) {\n    var image, fetchConf, response, body;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            image = new FormData();\n            image.append('image', file);\n            fetchConf = {\n              method: 'POST',\n              files: image,\n              body: image,\n              cache: 'default'\n            };\n            _context.next = 5;\n            return fetch('http://localhost:2000/upload', fetchConf);\n\n          case 5:\n            response = _context.sent;\n            _context.next = 8;\n            return response.json();\n\n          case 8:\n            body = _context.sent;\n            if (response.status !== 200) console.log('Error', body);\n            return _context.abrupt(\"return\", body.images);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function sendImage(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default function cards() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'ADD_BOOK') {// callApiPost(action.payload)\n    // return [...state, action.payload]\n  } else if (action.type === 'SEND_IMAGE') {\n    // console.log('ADD_BOOK state', state);\n    // console.log('FETCH_BOOKS_SUCCESS reducer', action.payload);\n    sendImage().then(function (res) {\n      return res;\n    }).then(function (data) {\n      dispatch({\n        type: 'SEND_IMAGE',\n        payload: data[0].url\n      });\n    });\n    return action.payload;\n  } else if (action.type === 'FETCH_BOOKS_SUCCESS') {\n    // console.log('ADD_BOOK state', state);\n    // console.log('FETCH_BOOKS_SUCCESS reducer', action.payload);\n    return action.payload;\n  } else if (action.type === 'DELETE_BOOK') {// callApiDelete(action.payload)\n    // var removeIndex = state.map(function(card) { return card._id; }).indexOf(action.payload);\n    // state.splice(removeIndex, 1);\n    //   return [...state]\n  }\n\n  return state;\n}","map":{"version":3,"sources":["F:\\node\\react_bookshelf\\src\\reducers\\cards.js"],"names":["initialState","title","__v","_id","sendImage","file","image","FormData","append","fetchConf","method","files","body","cache","fetch","response","json","status","console","log","images","cards","state","action","type","then","res","data","dispatch","payload","url"],"mappings":";;AAAA,IAAMA,YAAY,GAAG,CACrB;AACEC,EAAAA,KAAK,EAAE,EADT;AAEEC,EAAAA,GAAG,EAAE,CAFP;AAGEC,EAAAA,GAAG,EAAE;AAHP,CADqB,CAArB,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,KADY,GACJ,IAAIC,QAAJ,EADI;AAEdD,YAAAA,KAAK,CAACE,MAAN,CAAa,OAAb,EAAsBH,IAAtB;AACEI,YAAAA,SAHY,GAGA;AAAEC,cAAAA,MAAM,EAAE,MAAV;AACfC,cAAAA,KAAK,EAAEL,KADQ;AAEfM,cAAAA,IAAI,EAAEN,KAFS;AAGfO,cAAAA,KAAK,EAAE;AAHQ,aAHA;AAAA;AAAA,mBAOQC,KAAK,CAAC,8BAAD,EAAiCL,SAAjC,CAPb;;AAAA;AAOTM,YAAAA,QAPS;AAAA;AAAA,mBAQCA,QAAQ,CAACC,IAAT,EARD;;AAAA;AAQZJ,YAAAA,IARY;AASlB,gBAAIG,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6BC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAsBP,IAAtB;AATX,6CAUVA,IAAI,CAACQ,MAVK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAThB,SAAS;AAAA;AAAA;AAAA,GAAf;;AAgBA,eAAe,SAASiB,KAAT,GAA6C;AAAA,MAA9BC,KAA8B,uEAAtBtB,YAAsB;AAAA,MAARuB,MAAQ;;AAC1D,MAAIA,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC,CAC9B;AAEA;AAED,GALD,MAKO,IAAID,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AACnC;AACA;AAGApB,IAAAA,SAAS,GAAGqB,IAAZ,CAAiB,UAAAC,GAAG,EAAG;AACnB,aAAOA,GAAP;AACD,KAFH,EAEKD,IAFL,CAEU,UAAAE,IAAI,EAAG;AACXC,MAAAA,QAAQ,CAAC;AAAEJ,QAAAA,IAAI,EAAE,YAAR;AAAsBK,QAAAA,OAAO,EAAEF,IAAI,CAAC,CAAD,CAAJ,CAAQG;AAAvC,OAAD,CAAR;AACL,KAJD;AAMJ,WAAOP,MAAM,CAACM,OAAd;AAED,GAbM,MAcF,IAAIN,MAAM,CAACC,IAAP,KAAgB,qBAApB,EAA2C;AAC1C;AACA;AACJ,WAAOD,MAAM,CAACM,OAAd;AAED,GALI,MAMC,IAAIN,MAAM,CAACC,IAAP,KAAgB,aAApB,EAAmC,CACvC;AACA;AACA;AACA;AACD;;AACD,SAAOF,KAAP;AACD","sourcesContent":["const initialState = [\r\n{\r\n  title: \"\",\r\n  __v: 0,\r\n  _id: \"\",\r\n}\r\n];\r\n\r\n// const callApiPost = async (data) => {\r\n// const response = await fetch('/books', {\r\n//             method: 'POST',\r\n//             headers: {\r\n//             'Accept': 'application/json',\r\n//             'Content-Type': 'application/json',\r\n//             },\r\n//             body: JSON.stringify(data)\r\n//           })\r\n// const body = await response.json();\r\n// if (response.status !== 200) throw Error(body.message);\r\n//    return body;\r\n// }\r\n// const callApiDelete = async (data) => {\r\n// const response = await fetch('/books/' + data + '', {\r\n//             method: 'DELETE',\r\n//             headers: {\r\n//             'Accept': 'application/json',\r\n//             'Content-Type': 'application/json',\r\n//             }\r\n//           })\r\n// const body = await response.json();\r\n// if (response.status !== 200) throw Error(body.message);\r\n//    return body;\r\n// }\r\n//\r\n//\r\n//\r\n\r\nconst sendImage = async (file) => {\r\n  let image = new FormData();\r\n    image.append('image', file)\r\n  var fetchConf = { method: 'POST',\r\n   files: image,\r\n   body: image,\r\n   cache: 'default' };\r\n   const response = await fetch('http://localhost:2000/upload', fetchConf);\r\nconst body = await response.json();\r\nif (response.status !== 200) console.log('Error' , body);\r\n return body.images; };\r\n\r\n\r\n\r\n\r\n\r\nexport default function cards(state = initialState, action) {\r\n  if (action.type === 'ADD_BOOK') {\r\n    // callApiPost(action.payload)\r\n\r\n    // return [...state, action.payload]\r\n\r\n  } else if (action.type === 'SEND_IMAGE') {\r\n        // console.log('ADD_BOOK state', state);\r\n        // console.log('FETCH_BOOKS_SUCCESS reducer', action.payload);\r\n\r\n\r\n        sendImage().then(res =>{\r\n            return res\r\n          }).then(data =>{\r\n              dispatch({ type: 'SEND_IMAGE', payload: data[0].url })\r\n        })\r\n        \r\n    return action.payload;\r\n\r\n  }\r\n  else if (action.type === 'FETCH_BOOKS_SUCCESS') {\r\n        // console.log('ADD_BOOK state', state);\r\n        // console.log('FETCH_BOOKS_SUCCESS reducer', action.payload);\r\n    return action.payload;\r\n\r\n  }\r\n   else if (action.type === 'DELETE_BOOK') {\r\n    // callApiDelete(action.payload)\r\n    // var removeIndex = state.map(function(card) { return card._id; }).indexOf(action.payload);\r\n    // state.splice(removeIndex, 1);\r\n    //   return [...state]\r\n  }\r\n  return state;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}