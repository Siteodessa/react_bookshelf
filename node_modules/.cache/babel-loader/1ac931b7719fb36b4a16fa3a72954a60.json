{"ast":null,"code":"import _toConsumableArray from \"F:\\\\node\\\\react_bookshelf\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"F:\\\\node\\\\react_bookshelf\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\node\\\\react_bookshelf\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar initialState = [{\n  createdAt: \"\",\n  task: \"\",\n  task_desc: \"\",\n  task_status: \"\",\n  updatedAt: \"\",\n  __v: 0,\n  _id: \"\"\n}];\n\nvar callApiPost =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(data) {\n    var response, body;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('/task_management', {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(data)\n            });\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            body = _context.sent;\n\n            if (!(response.status !== 200)) {\n              _context.next = 8;\n              break;\n            }\n\n            throw Error(body.message);\n\n          case 8:\n            return _context.abrupt(\"return\", body);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function callApiPost(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar callApiDelete =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(data) {\n    var response, body;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch('/task_management/' + data + '', {\n              method: 'DELETE',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              }\n            });\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return response.json();\n\n          case 5:\n            body = _context2.sent;\n\n            if (!(response.status !== 200)) {\n              _context2.next = 8;\n              break;\n            }\n\n            throw Error(body.message);\n\n          case 8:\n            return _context2.abrupt(\"return\", body);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function callApiDelete(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default function cards() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'ADD_CARD') {\n    console.log(action.payload);\n    callApiPost(action.payload);\n    return [].concat(_toConsumableArray(state), [action.payload]);\n  } else if (action.type === 'FETCH_CARDS_SUCCESS') {\n    // console.log('ADD_CARD state', state);\n    return action.payload;\n  } else if (action.type === 'DELETE_CARD') {\n    callApiDelete(action.payload);\n    var removeIndex = state.map(function (card) {\n      return card._id;\n    }).indexOf(action.payload);\n    state.splice(removeIndex, 1);\n    return _toConsumableArray(state);\n  }\n\n  return state;\n}","map":{"version":3,"sources":["F:\\node\\react_bookshelf\\src\\reducers\\cards.js"],"names":["initialState","createdAt","task","task_desc","task_status","updatedAt","__v","_id","callApiPost","data","fetch","method","headers","body","JSON","stringify","response","json","status","Error","message","callApiDelete","cards","state","action","type","console","log","payload","removeIndex","map","card","indexOf","splice"],"mappings":"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","sourcesContent":["const initialState = [\r\n{\r\n  createdAt: \"\",\r\n  task: \"\",\r\n  task_desc: \"\",\r\n  task_status: \"\",\r\n  updatedAt: \"\",\r\n  __v: 0,\r\n  _id: \"\",\r\n}\r\n];\r\n\r\nconst callApiPost = async (data) => {\r\nconst response = await fetch('/task_management', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data)\r\n          })\r\nconst body = await response.json();\r\nif (response.status !== 200) throw Error(body.message);\r\n   return body;\r\n}\r\nconst callApiDelete = async (data) => {\r\nconst response = await fetch('/task_management/' + data + '', {\r\n            method: 'DELETE',\r\n            headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            }\r\n          })\r\nconst body = await response.json();\r\nif (response.status !== 200) throw Error(body.message);\r\n   return body;\r\n}\r\n\r\nexport default function cards(state = initialState, action) {\r\n  if (action.type === 'ADD_CARD') {\r\n\r\n\r\n          console.log(action.payload);\r\n    callApiPost(action.payload)\r\n    return [...state, action.payload]\r\n\r\n  } else if (action.type === 'FETCH_CARDS_SUCCESS') {\r\n        // console.log('ADD_CARD state', state);\r\n    return action.payload;\r\n\r\n  } else if (action.type === 'DELETE_CARD') {\r\n    callApiDelete(action.payload)\r\n    var removeIndex = state.map(function(card) { return card._id; }).indexOf(action.payload);\r\n    state.splice(removeIndex, 1);\r\n      return [...state]\r\n  }\r\n  return state;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}