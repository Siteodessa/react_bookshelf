{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\node\\\\react_bookshelf\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\node\\\\react_bookshelf\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar initialState = [{\n  bookFile: \"\"\n}];\n\nvar sendImage =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(file) {\n    var image, fetchConf, response, body;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            image = new FormData();\n            image.append('image', file);\n            fetchConf = {\n              method: 'POST',\n              files: image,\n              body: image,\n              cache: 'default'\n            };\n            _context.next = 5;\n            return fetch('http://localhost:2000/upload', fetchConf);\n\n          case 5:\n            response = _context.sent;\n            _context.next = 8;\n            return response.json();\n\n          case 8:\n            body = _context.sent;\n            if (response.status !== 200) console.log('Error', body);\n            console.log('Imageuploader body', body);\n            return _context.abrupt(\"return\", body.images);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function sendImage(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default function imageUploader() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'SEND_IMAGE') {\n    state = sendImage(action.payload);\n    return state;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["F:\\node\\react_bookshelf\\src\\reducers\\imageUploader.js"],"names":["initialState","bookFile","sendImage","file","image","FormData","append","fetchConf","method","files","body","cache","fetch","response","json","status","console","log","images","imageUploader","state","action","type","payload"],"mappings":";;AAAA,IAAMA,YAAY,GAAG,CACrB;AACEC,EAAAA,QAAQ,EAAE;AADZ,CADqB,CAArB;;AAOA,IAAMC,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,KADY,GACJ,IAAIC,QAAJ,EADI;AAEdD,YAAAA,KAAK,CAACE,MAAN,CAAa,OAAb,EAAsBH,IAAtB;AACEI,YAAAA,SAHY,GAGA;AAAEC,cAAAA,MAAM,EAAE,MAAV;AACfC,cAAAA,KAAK,EAAEL,KADQ;AAEfM,cAAAA,IAAI,EAAEN,KAFS;AAGfO,cAAAA,KAAK,EAAE;AAHQ,aAHA;AAAA;AAAA,mBAOQC,KAAK,CAAC,8BAAD,EAAiCL,SAAjC,CAPb;;AAAA;AAOTM,YAAAA,QAPS;AAAA;AAAA,mBAQCA,QAAQ,CAACC,IAAT,EARD;;AAAA;AAQZJ,YAAAA,IARY;AASlB,gBAAIG,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6BC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAsBP,IAAtB;AAC7BM,YAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCP,IAAlC;AAVkB,6CAWVA,IAAI,CAACQ,MAXK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAThB,SAAS;AAAA;AAAA;AAAA,GAAf;;AAgBC,eAAe,SAASiB,aAAT,GAAqD;AAAA,MAA9BC,KAA8B,uEAAtBpB,YAAsB;AAAA,MAARqB,MAAQ;;AACrE,MAAIA,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AACvBF,IAAAA,KAAK,GAAGlB,SAAS,CAACmB,MAAM,CAACE,OAAR,CAAjB;AACN,WAAOH,KAAP;AAED;;AACD,SAAOA,KAAP;AACD","sourcesContent":["const initialState = [\r\n{\r\n  bookFile: \"\",\r\n}\r\n];\r\n\r\n\r\nconst sendImage = async (file) => {\r\n  let image = new FormData();\r\n    image.append('image', file)\r\n  var fetchConf = { method: 'POST',\r\n   files: image,\r\n   body: image,\r\n   cache: 'default' };\r\n   const response = await fetch('http://localhost:2000/upload', fetchConf);\r\nconst body = await response.json();\r\nif (response.status !== 200) console.log('Error' , body);\r\nconsole.log('Imageuploader body', body);\r\n return body.images; };\r\n\r\n\r\n\r\n\r\n export default function imageUploader(state = initialState, action) {\r\nif (action.type === 'SEND_IMAGE') {\r\n           state = sendImage(action.payload)\r\n     return state;\r\n\r\n   }\r\n   return state;\r\n }\r\n"]},"metadata":{},"sourceType":"module"}